/*
=======================================================================================
This file is being updated constantly by the DevOps team to introduce new enhancements
based on the template for ngnix apps.  If you have suggestions for improvement,
please contact the DevOps team so that we can incorporate the changes into the
template.  In the meantime, if you have made changes here or dont want this file to be
updated, please indicate so at the beginning of this file.
=======================================================================================
*/

/*
All properties in this file are loaded by the pipeline in its initialization stage and
can be referenced as global variables. Most of the time, the only things you need to set here
are: application name and sandbox namespace to use. Default values are provided for the
rest of the config.
Other examples of customization in this file are:
    1. You can have different notification channels for POs, gatekeeps as well the pipeline itself
    2. You can specify POs and gatekeeps for your application
    3. You can specify which branch to be sonar-scanned.
    4. You can specify in which environments rollback is needed
*/

//APPLICATION PROPERTIES
//----------------------properties that dont vary from branch to branch or env to env
BRAND="cammis"
FED="dotcom"
APP_NAME="rais-launcher-app"
APP_TYPE="rais-launcher"
BRAND=APP_NAME
DEPLOYMENT_TIMEOUT_IN_SECONDS=300
UNIT_TESTS="npm run lint && npm run test"
VERSION="v0.1.0"

IMAGE_REGISTRY_CREDS_ID="image-registry-creds"

//AWS ECR
IMAGE_REGISTRY="136299550619.dkr.ecr.us-west-2.amazonaws.com"

GIT_DEPLOY_URL="git@github.com:ca-mmis/deployments-combined-devops.git"
GIT_DEPLOYMENT_REPO_NAME="deployments-combined-devops"

GIT_HOST="github.com"
GIT_GROUP="ca-mmis"
GIT_REPO_NAME="rais-launcher-app"
SSH_AGENT_GIT_ID="github-key"

LOCK_SKIPPING_OLD_BUILDS=true
LOCK_DEPLOYMENTS_REPO='deployments-github-repo'

NEXUS_REPO_GROUP="https://nexusrepo-tools.${CLUSTER_SUBDOMAIN}/repository/provider-portal-group/"
SLACK_URL="https://hooks.slack.com/services/T01GXTQGXC1/B01US9W9RC7"
//pos and gatekeepers should have their own channels
//channel initially contains jenkins creds id which will be replaced with real channel name
SLACK_CHANNELS=["po":["channel":"jenkins-notifications",
                      "token":"HJlDeTKjgxoReKIm6MvgQREm"],
                "pipeline":["channel":"jenkins-notifications",
                            "token":"HJlDeTKjgxoReKIm6MvgQREm"],
                "gate_keeper":["channel":"jenkins-notifications",
                               "token":"HJlDeTKjgxoReKIm6MvgQREm"]
]

//make sure all sandboxes can pull image from SANDBOX_IMAGE_SPACE
SANDBOX_IMAGE_SPACE="cammis-ecr"
//make sure all high environments can pull image from NON_SANDBOX_IMAGE_SPACE
NON_SANDBOX_IMAGE_SPACE="cammis-ecr"

ISTIO_URLS = ["sandbox":"http://{HOST}.c2c-com.cammis.com",
              "non_sandbox":"http://www.c2c-{HOST}.cammis.com"
]

//GIT BRANCH PROPERTIES
//------------------define branch types and actual branches for each type as well as stages each branch type
//------------------goes through
MASTER="master"
HOTFIX="hotfix"
RELEASE="release"
DEVELOP="develop"
FEATURE="feature"
SBBRANCH="sbbranch"

//"build" should always be the first stage.  After "build" are the stages corresponding to the real environments
BRANCHES=["master":["branches":["master"],
                    "stages":["build","dev","qa","prod"]
                   ],
          "hotfix":["branches":["hotfix1","hotfix2"],
                    "stages":["build","prod"]
                   ],
          "release":["branches":["release1.0","release2.02"],
                    "stages":["build","prod"]
                    ],
          "develop":["branches":["iteration1","iteration2","develop"],
                    "stages":["build","dev","qa","prod"]
                    ],
          "sbbranch":["branches":["sandbox00","sandbox01","sandbox02","sandbox03","sandbox04","sandbox05"],
                    "stages":["sandbox"]
                    ],
          "feature":["branches":["*"],
                    "stages":["nodeploy"]
                    ]
]

//define branches that need sonar scanning
SONAR_BRANCH_TYPES = [MASTER,SBBRANCH]
SONAR_TIMEOUT = 3
SONAR_SLEEP = 10000
SONAR_ERROR_MSG = "QUALITY GATE ERROR: Pipeline set to unstable "
SONAR_BUILD_RESULT = "UNSTABLE"
SONAR_SLACK_MSG = "Quality Gate Passed"

//DEPLOYMENT ENVIRONMENT PROPERTIES
//-----------------------define environment types and actual namespace for each env type as well as other relevant
//-----------------------info about each env type
SANDBOX="sandbox"
DEV="dev"
QA="qa"
PROD="prod"

PRIMARY_REGION="us-west"
REGIONS=[
    "us-west":[
	    "shortname":"west"],
    "us-east":[
	    "shortname":"east"]
]

//environment specific config goes here
KUBE_ENVS=[
    "nodeploy":[ "namespaces":[],
              "kube_config_creds_id":"nodeploy",
              "needs_gatekeeper":"no"],
    "sandbox":[ "namespaces":["sandbox00","sandbox01","sandbox02","sandbox03","sandbox04","sandbox05"],
              "LOG_LEVEL":"debug",
              "kube_config_creds_id":"kubeconfig-dev",
              "startup_args_wget":"! wget",
              "cluster_env":"dev",
              "HOOK_DELETE_POLICY":"BeforeHookCreation",
              "mcweb_env":"dev",
              "MIN_REPLICAS":"1",
              "MAX_REPLICAS":"9",
              "AVG_UTIL":"60",
              "SCALEDOWN_PODS":"2",
              "SCALEDOWN_PODS_SECS":"15",
              "SCALEDOWN_PCT":"100",
              "SCALEDOWN_PCT_SECS":"15",
              "SCALEDOWN_STAB_SECS":"300",
              "SCALEUP_PODS":"2",
              "SCALEUP_PODS_SECS":"15",
              "SCALEUP_PCT":"100",
              "SCALEUP_PCT_SECS":"15",
              "SCALEUP_STAB_SECS":"0",
              "MCWEB_SSO_URL":"https://camvdevwmcwwb01.ad.caxix.acs-inc.com:8443",
              "needs_gatekeeper":"no"],
    "dev":[ "namespaces":["dev"],
            "kube_config_creds_id":"kubeconfig-dev",
            "needs_gatekeeper":"no",
            "HOOK_DELETE_POLICY":"BeforeHookCreation",
            "approval_timeout":"7200",
            "cluster_env":"dev",
            "mcweb_env":"dev",
            "startup_args_wget":"! wget",
            "gatekeepers_jenkins":"marty.schwartz",
            "gatekeepers_slack":"@wmschwar",
            "approval_message":"Approve to deploy to Dev?",
            "MIN_REPLICAS":"3",
            "MAX_REPLICAS":"12",
            "AVG_UTIL":"60",
            "SCALEDOWN_PODS":"2",
            "SCALEDOWN_PODS_SECS":"15",
            "SCALEDOWN_PCT":"100",
            "SCALEDOWN_PCT_SECS":"15",
            "SCALEDOWN_STAB_SECS":"200",
            "SCALEUP_PODS":"4",
            "SCALEUP_PODS_SECS":"5",
            "SCALEUP_PCT":"100",
            "SCALEUP_PCT_SECS":"5",
            "SCALEUP_STAB_SECS":"0",
            "MCWEB_SSO_URL":"https://camvdevwmcwwb01.ad.caxix.acs-inc.com:8443",
            "LOG_LEVEL":"debug"],
    "qa":[ "namespaces":["qa"],
           "kube_config_creds_id":"kubeconfig-qa",
           "needs_gatekeeper":"yes",
           "needs_po":"yes",
           "HOOK_DELETE_POLICY":"HookSucceeded",
           "ack_timeout":"300",
           "approval_timeout":"7200",
           "cluster_env":"tst",
           "mcweb_env":"qa",
           "pos_jenkins":"marty.schwartz",
           "pos_slack":"@wmschwar",
           "startup_args_wget":"! wget",
           "gatekeepers_jenkins":"marty.schwartz",
           "gatekeepers_slack":"@wmschwar",
           "approval_message":"Approve to deploy to QA?",
           "MIN_REPLICAS":"3",
           "MAX_REPLICAS":"12",
           "AVG_UTIL":"60",
           "SCALEDOWN_PODS":"2",
           "SCALEDOWN_PODS_SECS":"15",
           "SCALEDOWN_PCT":"100",
           "SCALEDOWN_PCT_SECS":"15",
           "SCALEDOWN_STAB_SECS":"200",
           "SCALEUP_PODS":"4",
           "SCALEUP_PODS_SECS":"5",
           "SCALEUP_PCT":"100",
           "SCALEUP_PCT_SECS":"5",
           "SCALEUP_STAB_SECS":"0",
           "MCWEB_SSO_URL":"https://accepttest.medi-cal.ca.gov",
           "LOG_LEVEL":"info"],
    "prod":[ "namespaces":["prod"],
           "kube_config_creds_id":"kubeconfig-prod",
           "needs_gatekeeper":"yes",
           "HOOK_DELETE_POLICY":"HookSucceeded",
           "ack_timeout":"300",
           "cluster_env":"prd",
           "mcweb_env":"prod",
           "approval_timeout":"7200",
           "startup_args_wget":"! wget",
           "gatekeepers_jenkins":"marty.schwartz",
           "gatekeepers_slack":"@wmschwar",
           "approval_message":"Approve to deploy to prod?",
           "MIN_REPLICAS":"10",
           "MAX_REPLICAS":"85",
           "AVG_UTIL":"40",
           "SCALEDOWN_PODS":"2",
           "SCALEDOWN_PODS_SECS":"15",
           "SCALEDOWN_PCT":"100",
           "SCALEDOWN_PCT_SECS":"15",
           "SCALEDOWN_STAB_SECS":"200",
           "SCALEUP_PODS":"8",
           "SCALEUP_PODS_SECS":"2",
           "SCALEUP_PCT":"100",
           "SCALEUP_PCT_SECS":"2",
           "SCALEUP_STAB_SECS":"0",
           "MCWEB_SSO_URL":"https://www.medi-cal.ca.gov",
           "LOG_LEVEL":"warn"]
]

//environments that need rollback on failure
ROLLBACK_ENVS = [QA,PROD]

//mile stones
SANDBOX_MILESTONE=0
DEV_MILESTONE=1
QA_MILESTONE=2
PROD_MILESTONE=6

//tags

SANDBOX_PASSED=BRAND+"_deployed_in_sandbox"
DEV_PASSED=BRAND+"_deployed_in_dev"
QA_PASSED=BRAND+"_deployed_in_qa"
SECURITY_PASSED=BRAND+"_security_passed"
PEN_PASSED=BRAND+"_pen_passed"
RELEASE_CANDIDATE=BRAND+"_RC"
PREVIOUS_PRODUCTION=BRAND+"_previous_production"
CURRENT_PRODUCTION=BRAND+"_current_production"
RELEASE_NAME="REL"
