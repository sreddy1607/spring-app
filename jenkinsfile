env.BRANCH_NAME ?: "ecr"
def environmentNamespace = env.NAMESPACE ?: "dev"
def workspaceDirectory = "/home/jenkins/agent"

pipeline {
    agent {
        kubernetes {
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              serviceAccountName: jenkins
              volumes:
                - name: dockersock
                  hostPath:
                    path: /var/run/docker.sock
                - name: varlibcontainers
                  emptyDir: {}
                - name: jenkins-trusted-ca-bundle
                  configMap:
                    name: jenkins-trusted-ca-bundle
                    defaultMode: 420
                    optional: true
              containers:
                - name: jnlp
                  securityContext:
                    privileged: true
                  envFrom:
                    - configMapRef:
                        name: jenkins-agent-env
                        optional: true
                  env:
                    - name: GIT_SSL_CAINFO
                      value: "/etc/pki/tls/certs/ca-bundle.crt"
                  volumeMounts:
                    - name: jenkins-trusted-ca-bundle
                      mountPath: /etc/pki/tls/certs
                - name: cammismaven
                  image: 136299550619.dkr.ecr.us-west-2.amazonaws.com/cammismaven:1.0.0
                  tty: true
                  command: ["/bin/bash"]
                  securityContext:
                    privileged: true
                  workingDir: ${workspaceDirectory}
                  envFrom:
                    - configMapRef:
                        name: jenkins-agent-env
                        optional: true
                  env:
                    - name: HOME
                      value: ${workspaceDirectory}
                    - name: BRANCH
                      value: ${currentBranch}
                    - name: NEXUS_ACCESS_TOKEN
                      valueFrom:
                        secretKeyRef:
                          name: jenkins-token-qqsb2
                          key: token
                    - name: GIT_SSL_CAINFO
                      value: "/etc/pki/tls/certs/ca-bundle.crt"
                  volumeMounts:
                    - name: jenkins-trusted-ca-bundle
                      mountPath: /etc/pki/tls/certs
            """
        }
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 5, unit: 'HOURS')
        skipDefaultCheckout()
        buildDiscarder(logRotator(numToKeepStr: '20'))
    }

    parameters {
        extendedChoice(
            name: 'ArtifactVersion',
            description: 'Choose the artifact version from Nexus',
            type: 'PT_SINGLE_SELECT',
            groovyScript: '''
                def nexusUrl = "https://nexusrepo-tools.apps.bld.cammis.medi-cal.ca.gov/service/rest/v1/search?repository=maven-releases&group=tarpurge&name=tarpurge"
                def versions = []
                def jsonSlurper = new groovy.json.JsonSlurper()
                def response = new URL(nexusUrl).text
                def parsedResponse = jsonSlurper.parseText(response)
                
                parsedResponse.items.each { item ->
                    versions.add(item.version)
                }
                return versions.reverse()
            ''',
            multiSelectDelimiter: ','
        )
    }

    environment {
        env_git_branch_type = "feature/devops"
        env_git_branch_name = ""
        env_current_git_commit = ""
        env_skip_build = "false"
        env_stage_name = ""
        env_step_name = ""
        SONAR_TIMEOUT = 3
        SONAR_SLEEP = 10000
        SONAR_ERROR_MSG = "QUALITY GATE ERROR: Pipeline set to unstable"
        SONAR_BUILD_RESULT = "UNSTABLE"
        SONAR_SLACK_MSG = "Quality Gate Passed"
        NEXUS_URL = "https://nexusrepo-tools.apps.bld.cammis.medi-cal.ca.gov"
        NEXUS_REPOSITORY = "surge-tar-maven"
        NEXUS_CREDENTIALS = credentials('nexus-credentials')
        REPOSITORY = 'surge-tar-maven'
        GROUP_ID = 'tarpurge'
        ARTIFACT_ID = 'tarpurge'
        PACKAGING = 'jar'
        CREDENTIALS_ID = 'nexus-credentials'
    }

    stages {
        stage("Initialize") {
            steps {
                container(name: "cammismaven") {
                    script {
                        env_stage_name = "initialize"
                        env_step_name = "checkout"
                        deleteDir()
                        echo 'Checkout source and get the commit ID'
                        env_current_git_commit = checkout(scm).GIT_COMMIT
                    }
                }
            }
        }
        
        stage("Nexus_params") {
            steps {
                container(name: "cammismaven") {
                    script {
                        def nexusResponse = sh(script: """ 
                            curl -kv -u ${NEXUS_CREDENTIALS_USR}:${NEXUS_CREDENTIALS_PSW} -X GET "${NEXUS_URL}/service/rest/v1/search?repository=${NEXUS_REPOSITORY}&group=${GROUP_ID}&name=${ARTIFACT_ID}" -H "Accept: application/json" -s 
                        """, returnStdout: true)

                        def jsonResponse = readJSON(text: nexusResponse)
                        def versions = jsonResponse.items.collect { it.version }.join(',')

                        properties([parameters([extendedChoice(name: 'ARTIFACT_VERSION', 
                                                                type: 'PT_SINGLE_SELECT', 
                                                                value: versions, 
                                                                description: 'Select the version of the Maven artifact')])])

                        echo "Available versions: ${versions}"
                    }
                }
            }
        }

stage("Download Artifacts") {
    steps {
        container(name: "cammismaven") {
            script {
                def selectedVersion = params.ARTIFACT_VERSION
                def targetDirectory = "${workspaceDirectory}/target"
                
                // Prepare download URLs for each file type
                def jarDownloadUrl = "${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${GROUP_ID.replace('.', '/')}/${ARTIFACT_ID}/${selectedVersion}/${ARTIFACT_ID}-${selectedVersion}.jar"
                def warDownloadUrl = "${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${GROUP_ID.replace('.', '/')}/${ARTIFACT_ID}/${selectedVersion}/${ARTIFACT_ID}-${selectedVersion}.war"
                def xmlDownloadUrl = "${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${GROUP_ID.replace('.', '/')}/${ARTIFACT_ID}/${selectedVersion}/${ARTIFACT_ID}-${selectedVersion}.xml"

                echo "Downloading files from Nexus..."

                // Ensure the target directory exists
                sh "mkdir -p ${targetDirectory}"

                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    // Download JAR file
                    sh """
                        curl -o ${targetDirectory}/${ARTIFACT_ID}-${selectedVersion}.jar -u '${NEXUS_USER}:${NEXUS_PASS}' -k "${jarDownloadUrl}"
                    """

                    // Download WAR file
                    sh """
                        curl -o ${targetDirectory}/${ARTIFACT_ID}-${selectedVersion}.war -u '${NEXUS_USER}:${NEXUS_PASS}' -k "${warDownloadUrl}"
                    """

                    // Download XML file
                    sh """
                        curl -o ${targetDirectory}/${ARTIFACT_ID}-${selectedVersion}.xml -u '${NEXUS_USER}:${NEXUS_PASS}' -k "${xmlDownloadUrl}"
                    """
                }

                // Verify all downloads
                sh "ls -l ${targetDirectory}"

                // Check for each file type
                if (!fileExists("${targetDirectory}/${ARTIFACT_ID}-${selectedVersion}.jar")) {
                    error("JAR file not found!")
                } else {
                    echo "JAR file downloaded successfully!"
                }

                if (!fileExists("${targetDirectory}/${ARTIFACT_ID}-${selectedVersion}.war")) {
                    error("WAR file not found!")
                } else {
                    echo "WAR file downloaded successfully!"
                }

                if (!fileExists("${targetDirectory}/${ARTIFACT_ID}-${selectedVersion}.xml")) {
                    error("XML file not found!")
                } else {
                    echo "XML file downloaded successfully!"
                }
            }
        }
     }
    }
  }
}
